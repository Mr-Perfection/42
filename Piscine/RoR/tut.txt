


Git
#revert back to previous state if you delete files before committing.
git checkout -f #-f will force overwriting the current changes

#create branches to make changes without modifying the parent files
git checkout -b $(name)

#check where you are at… which branch
git branch

#commit
git commit -am #-a flag commiting all modifications to existing files

#merge, results back into the master branch
git checkout master 	#switch to branch ‘master’
git merge $(name)	#merge!
git branch -d $(name)	#delete the branch or clean up!
git branch -D $(name)	#delete the branceh though havent merged in the changes.
git reset --hard HEAD~1	#reset the master origin to one previous commit.
git diff $(branch) HEAD~#(number of commits before...)
git diff --staged #one that has been added.
git push -u origin $(topic or branch name)
#arranges to push the topic or branch up to the git host
Deployment
-There are a variety of options:
	1. Phusion Passenger-
		*Better performance? Can hook your web app to any unix servers (including aws)
		*Costs money for the enterprise level but there is free tier.
	2. Heroku-
		*really easy to deploy. Don't worry about backend stuff they will take care of it
		*Costs quite a bit of money once getting some traffic.
	3.	Engine Yard

#if you use sqlite for development mode then use gem 'pg' in the production if deploying
#to heroku because heroku only supports postgresql

#Run bundle install with a special flag if you want to prevent the local installtion of any
# production gems
bundle install --without production

Heroku
	heroku login
	heroku keys:add
	heroku create # to create a place on the heroku servers

	#deploy with Heroku
	git push heroku master

	#other commands...
	https://devcenter.heroku.com/articles/heroku-command


#Users Resource
rails generate scaffold User name:string email:string #Scaffolding is the auto generation of simple #set of models


Rails Commands

	rails generate controller StaticPages home help
	rails destroy  controller StaticPages home help

	rails generate model User name:string email:string
	rails destroy model User

	rake(or rails) db:migrate
	rake db:rollback #undo a single migration step
	db:migrate VERSION=0

	rails s
	rails console or c
	rails test or t
	bundle install or bundle
	rails server -b $IP -p $PORT
	# Use `rails server` if running locally.

Testing

ex)
	require 'test_helper'

	class StaticPagesControllerTest < ActionDispatch::IntegrationTest

	test "should get root" do
    get FILL_IN
    assert_response FILL_IN
  	end
  	#def setup
    	@base_title = "Ruby on Rails Tutorial Sample App"
	end
	  test "should get home" do
	    get static_pages_home_url
	    assert_response :success
	  	assert_select "title", "Home | #{base_title}"
	  	#checks the presence of <title tag>
	  end
	  test "should get help" do
	    get static_pages_help_url
	    assert_response :success
	  	assert_select "title", "Help | #{base_title}"
	  	#checks the presence of <title tag>
	  end
	   	test "should get about" do
		get static_pages_about_url
		assert_response :success
		assert_select "title", "About | Ruby on Rails Tutorial Sample App"
  		#checks the presence of <title tag>
  end
	end
#run it with 'rails test'
ex)
	Show Red and Green for Rails tests at the appropriate times.
	#Add this inside test/test_helper.rb
	require "minitest/reporters"
	Minitest::Reporters.use!

ex) Automated tests with Guard
bundle exec guard init #will write new Guardfile to...

guard :minitest, spring: true, all_on_start: false do
#defines the matching rules for Guard
#Guard uses Spring server by Rails to speed up the loading time
#Add spring/ in .gitignore file to avoid conflict issues
ex)
#Ignore spring files
/spring/*.pid
# KILL Unix Processes if the Spring server is slowing your tests.
ps aux #see all the processes on your system
ps aux | grep spring #specify to spring
kill -15 $(pid number) #pid is the first 5 digit number
pkill -15 -f spring #kill all the processes named spring

Generated static Pages
rails g controller StaticPages home help
#will create controller handles static pages

Rails Ruby Syntax
	Use Rails console
	ex)
		first_name = "Stephen"
		* Two ways of displaying strings
			-first_name + " is cool."
			"#{first_name} is cool."
	ex)
		puts "foo"
		foo
		=> nil #this just put string or display it on the screen.
		print "foo" #same thing without the new line.
	ex)
		"foobar".length	#get the length of a string
		"foobar".empty? returns false #checks whether empty r not.
	ex)
		s = "Stephen"
		if s.empty?
			"it is empty"
		else if s.nil?
			"it is nil"
		elsif s.include?("stephen")
			"The string includes 'Stephen'"
		end
			The string includes 'Stephen'
	ex)
		x = "foo"
		y = ""
		`
	ex)
		#define function that checks the empty string
		def string_message(arg = '')
			if arg.empty?
				"Empty"
			else
				"Non Empty"
			end
		end
		returns nil
		puts string_message("")
		returns Empty
		puts string_message("foobar")
		returns Non Empty
	ex)
		#define function that returns full title
		module ApplicationHelper
			def full_title(page_title= '')
				base_title = "Hello world"
				if page_title.empty?
					base_title
				else
					page_title + " | " + base_title
				end
			end
		end