Level 3

Write a program that takes a positive integer as argument and displays the sum
of all prime numbers inferior or equal to it followed by a newline.

If the number of arguments is not 1, or the argument is not a positive number,
just display 0 followed by a newline.

Yes, the examples are right.

Examples:

$>./add_prime_sum 5
10
$>./add_prime_sum 7 | cat -e
17$
$>./add_prime_sum | cat -e
0$
$>


Takes a positive integer x

int check_prime(num)
	int n
	n = 2
	while n < num
		num % n == 0
			return 0
		n++;
	end
	return 1
 
end

int helper(max, min, sol)
	if min == max
		return sol
	end
	if check_prime
		sol++;
	end
end

main func
	if x != 1 or x < 0 
		print 0 \n
	end
	return helper(x, 2, 0)
end




Assignment name  : epur_str
Expected files   : epur_str.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays this string with exactly one
space between words, with no spaces or tabs either at the beginning or the end,
followed by a \n.

A "word" is defined as a part of a string delimited either by spaces/tabs, or
by the start/end of the string.

If the number of arguments is not 1, or if there are no words to display, the
program displays \n.

Example:

$> ./epur_str "vous voyez c'est facile d'afficher la meme chose" | cat -e
vous voyez c'est facile d'afficher la meme chose$
$> ./epur_str " seulement          la c'est      plus dur " | cat -e
seulement la c'est plus dur$
$> ./epur_str "comme c'est cocasse" "vous avez entendu, Mathilde ?" | cat -e
$
$> ./epur_str "" | cat -e
$
$>


while str[i]
	if str[0] is ‘ ‘ or str[i] = ‘\n’ or str[i] = ‘\t’
		continue;
	end
	if(str[i] == ’ ’ && str[i - 1] == ‘ ‘)
		continue;
	end
	write str[i];
end

write “\n”






Assignment name  : ft_atoi_base
Expected files   : ft_atoi_base.c
Allowed functions: None
--------------------------------------------------------------------------------

Write a function that converts the string argument str (base N <= 16)
to an integer (base 10) and returns it.

The characters recognized in the input are: 0123456789abcdef
Those are, of course, to be trimmed according to the requested base. For
example, base 4 recognizes "0123" and base 16 recognizes "0123456789abcdef".

Uppercase letters must also be recognized: "12fdb3" is the same as "12FDB3".

Minus signs ('-') are interpreted only if they are the first character of the
string.

Your function must be declared as follows:

int	ft_atoi_base(const char *str, int str_base);

int ft_atoi(char *c)
	int ans;
	int i;
	i = 0;
	while(c[i])
		if !c[i+1]
			i *= 10
		end
		
		i += c[i] - ‘0’
	end
end
int	ft_atoi_base(const char *str, int str_base)
{
	
}

“10” “4”
-22
“11” “4”
-23

echo $(#ft_line)